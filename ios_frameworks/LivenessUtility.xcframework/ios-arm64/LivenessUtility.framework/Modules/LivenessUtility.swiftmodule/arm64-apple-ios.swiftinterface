// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LivenessUtility
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ARKit
import AVFoundation
import CoreGraphics
import CoreMedia
import CoreVideo
import Foundation
@_exported import LivenessUtility
import Metal
import MetalKit
import MobileCoreServices
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objc public class LivenessCalculator : ObjectiveC.NSObject {
  public var isValidating: Swift.Bool
  public var additionHeader: [Swift.String : Swift.String]
  public var additionParam: [Swift.String : Any]
  @objc public func calculateLiveness(frame: ARKit.ARFrame, onDone: ((UIKit.UIImage, UIKit.UIImage) -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose = 0
  case debug = 1
  case info = 2
  case warning = 3
  case error = 4
  case none = 5
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [LivenessUtility.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [LivenessUtility.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: LivenessUtility.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
public struct ConfigData {
  public var isActiveSmile: Swift.Bool
  public var isActiveWink: Swift.Bool
}
@_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objc public class LivenessUtil : ObjectiveC.NSObject {
  @objc public class func createLivenessDetector(previewView: UIKit.UIView, threshold: LivenessUtility.LivenessUtilitySensitivityThreshold = .medium, delay: Swift.Double = 0, smallFaceThreshold: Swift.Double = 0.35, debugging: Swift.Bool = false, delegate: (any LivenessUtility.LivenessUtilityDetectorDelegate)?, livenessMode: LivenessUtility.LivenessMode = .threeDimension, isWink: Swift.Bool = false, delayErrorTime: Foundation.TimeInterval = 3, isOnlyLiveness: Swift.Bool = false, additionParam: [Swift.String : Any] = [:], additionHeader: [Swift.String : Swift.String] = [:]) -> LivenessUtility.LivenessUtilityDetector
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13.0, *)
@objc public protocol LivenessUtilityDetectorDelegate {
  @objc optional func liveness(liveness: LivenessUtility.LivenessUtilityDetector, startLivenessAction action: LivenessUtility.LivenessAction)
  @objc optional func liveness(liveness: LivenessUtility.LivenessUtilityDetector, didFail withError: LivenessUtility.LivenessError)
  @objc optional func liveness(liveness: LivenessUtility.LivenessUtilityDetector, didFinish verificationImage: UIKit.UIImage, thermalImage: UIKit.UIImage?, videoURL: Foundation.URL?)
}
@_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objc public class LivenessUtilityDetector : ObjectiveC.NSObject {
  weak public var delegate: (any LivenessUtility.LivenessUtilityDetectorDelegate)?
  public var cardId: Swift.String
  @objc public func getVerificationRequiresAndStartSession() throws
  @objc public func stopLiveness()
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum LivenessMode : Swift.Int {
  case twoDimension
  case threeDimension
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LivenessError : Swift.Int, Swift.Error {
  case noFaceDetected
  case smallFace
  case badImage
  case noVerificationInstruction
  case badResponse
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LivenessAction : Swift.Int {
  case detectingFace
  case eyesLookIn = 1
  case smile
  case wink
  case headPoseUp
  case headPoseDown
  case headPoseLeft
  case headPoseRight
  case startVerification
  case fetchConfig
  case processing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class ImageAction : ObjectiveC.NSObject {
  public var action: LivenessUtility.LivenessAction?
  public var image: Swift.String?
  @objc deinit
}
@objc public enum LivenessUtilitySensitivityThreshold : Swift.Int {
  case low = 1
  case medium
  case high
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, *)
@objc public class DepthLivenessDetector : LivenessUtility.LivenessUtilityDetector {
  @objc public init(previewView: UIKit.UIView, threshold: LivenessUtility.LivenessUtilitySensitivityThreshold = .high, delay: Swift.Double = 0, smallFaceThreshold: Swift.Double = 0.35, debugging: Swift.Bool = true)
  @objc public func startLivenessDetection()
  @objc override public func getVerificationRequiresAndStartSession() throws
  @objc override public func stopLiveness()
  @objc deinit
}
@available(iOS 13.0, *)
extension LivenessUtility.DepthLivenessDetector : ARKit.ARSessionDelegate {
  @objc dynamic public func session(_ session: ARKit.ARSession, didUpdate frame: ARKit.ARFrame)
  @objc dynamic public func session(_ session: ARKit.ARSession, didUpdate anchors: [ARKit.ARAnchor])
}
@available(iOS 13.0, *)
extension LivenessUtility.DepthLivenessDetector : ARKit.ARSCNViewDelegate {
  @objc dynamic public func renderer(_ renderer: any SceneKit.SCNSceneRenderer, didRemove node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @objc dynamic public func renderer(_ renderer: any SceneKit.SCNSceneRenderer, didAdd node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @objc dynamic public func renderer(_ renderer: any SceneKit.SCNSceneRenderer, didUpdate node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
}
extension LivenessUtility.LogLevel : Swift.Equatable {}
extension LivenessUtility.LogLevel : Swift.Hashable {}
extension LivenessUtility.LogLevel : Swift.RawRepresentable {}
extension LivenessUtility.LivenessMode : Swift.Equatable {}
extension LivenessUtility.LivenessMode : Swift.Hashable {}
extension LivenessUtility.LivenessMode : Swift.RawRepresentable {}
extension LivenessUtility.LivenessError : Swift.Equatable {}
extension LivenessUtility.LivenessError : Swift.Hashable {}
extension LivenessUtility.LivenessError : Swift.RawRepresentable {}
extension LivenessUtility.LivenessAction : Swift.Equatable {}
extension LivenessUtility.LivenessAction : Swift.Hashable {}
extension LivenessUtility.LivenessAction : Swift.RawRepresentable {}
extension LivenessUtility.LivenessUtilitySensitivityThreshold : Swift.Equatable {}
extension LivenessUtility.LivenessUtilitySensitivityThreshold : Swift.Hashable {}
extension LivenessUtility.LivenessUtilitySensitivityThreshold : Swift.RawRepresentable {}
